{"version":3,"sources":["index.js","src/js/index.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","names","_a","firstDestructure","secondDestructure","more","slice","names1","names2","names3","concat","spreadObj","firstName","lastName","spreadObj2","spreadResult","_i","names_1","item","console","log"],"mappings":"AAAA,IAAIA,WAAY,QAAQ,KAAKA,QAAd,IAA2BC,OAAOC,MAAlC,IAA4C,UAASC,CAAT,EAAY;AACnE,SAAK,IAAIC,CAAJ,EAAOC,IAAI,CAAX,EAAcC,IAAIC,UAAUC,MAAjC,EAAyCH,IAAIC,CAA7C,EAAgDD,GAAhD,EAAqD;AACjDD,YAAIG,UAAUF,CAAV,CAAJ;AACA,aAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,OAAOS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,EAAEM,CAAF,IAAOL,EAAEK,CAAF,CAAP;AACP;AACD,WAAON,CAAP;AACH,CAPD;ACAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA,IAAMU,QAAQ,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,EAA6C,MAA7C,CAAd;AACO,IAAAC,KAAAD,MAAA,CAAA,CAAA;AAAA,IAAAE,mBAAAD,OAAA,KAAA,CAAA,GAAA,OAAA,GAAAA,EAAA;AAAA,IAA4BE,oBAAAH,MAAA,CAAA,CAA5B;AAAA,IAA+CI,OAAAJ,MAAAK,KAAA,CAAA,CAAA,CAA/C;AACP;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMC,SAAS,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,MAArC,EAA6C,MAA7C,CAAf;AACA,IAAMC,SAAS,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,CAAf;AACA,IAAMC,SAAaF,OAAMG,MAAN,CAAWF,MAAX,EAAiB,CAAE,SAAF,CAAjB,CAAnB;AACA;AAGA,IAAMG,YAAY;AACdC,eAAW,MADG;AAEdC,cAAU;AAFI,CAAlB;AAIA,IAAMC,aAAa;AACfD,cAAU;AADK,CAAnB;AAIA,IAAME,eAAY3B,SAAA,EAAA,EAAOuB,SAAP,EAAqBG,UAArB,CAAlB;AACA;AAEA,KAAgB,IAAAE,KAAA,CAAA,EAAAC,UAAAhB,KAAhB,EAAgBe,KAAAC,QAAArB,MAAhB,EAAgBoB,IAAhB,EAAqB;AAAjB,QAAIE,OAAID,QAAAD,EAAA,CAAR;AACAG,YAAQC,GAAR,CAAYF,IAAZ;AACH","file":"index.js","sourcesContent":["var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\n// for (let i = 0; i <= 10; i++) {\n//     var button = makeButton(\"button \" + i);\n//     button.onclick = function () {\n//         alert('button ' + i);\n//     }\n// }\n// namespace AtomicNumbers {\n//     export const H = 1;\n//     export const He = 2;\n// }\n// function greetRegular(name) {\n//     return \"Hello, \" + name;\n// }\n// const greetMin = (name: string) => \"Hello, \" + name;\n// interface USPostalAddress {\n//     streetAddress1: string;\n//     streetAddress2?: string;\n//     city: string;\n//     state: string;\n//     zip: string;\n//     country: string;\n// }\n// const addressData1: USPostalAddress = {\n//     streetAddress1: \"123 Main\",\n//     //streetAddress2: \"3rd floor\",\n//     city: \"Anytown\",\n//     state: \"NY\",\n//     zip: \"10001-1234\",\n//     country: \"USA\"\n// }\n// const {\n//     streetAddress1: street1,\n//     streetAddress2: street2 = \"\",\n//     city,\n//     state\n// } = addressData1;\n// const employee = {\n//     workAddress: addressData1,\n//     position: {\n//         department: {\n//             name: \"Development\"\n//         }\n//     }\n// };\n// {\n//     const { workAddress: { city }, position: { department: { name: departmentName } } } = employee;\n//     console.log(departmentName);        \n// }\n// function categorizedEmployee({ workAddress: { city } = {city}, position: { department: { name: departmentName } } }) {\n//     return {\n//         city,\n//         departmentName\n//     }\n// }\n// const category = categorizedEmployee(employee)\n// Destructuring arrays\nvar names = ['Jim', 'Fred', 'Bob', 'Sam', 'Joe', 'Mike', 'Mark'];\nvar _a = names[0], firstDestructure = _a === void 0 ? 'Steve' : _a, secondDestructure = names[1], more = names.slice(2);\n// console.log(firstDestructure); // => Jim\n// multiGreet(...names);\n// function multiGreet(...items: string[]){\n//     items.forEach(item => {\n//         console.log(friend`hello ${item}.`); \n//     });\n// }\n// function friend(strings: string[], ...substitutions: string[]){\n//     if(!substitutions[0]){\n//         substitutions[0] = 'Friend';\n//     }\n//     return processTaggedTemplate(strings, substitutions);\n// }\n// function processTaggedTemplate(strings: string[], substitutions: string[]){\n//     const result = [];\n//     substitutions.forEach((sub, index) => {\n//         result.push(strings[index], sub);\n//     });\n//     result.push(strings[strings.length -1]);\n//     return result.join('');\n// }\nvar names1 = ['Jim', 'Fred', 'Bob', 'Sam', 'Joe', 'Mike', 'Mark'];\nvar names2 = ['Eric', 'Scott', 'Steve'];\nvar names3 = names1.concat(names2, ['Brendon']);\n// console.log(names3);\nvar spreadObj = {\n    firstName: 'Mark',\n    lastName: 'Barry'\n};\nvar spreadObj2 = {\n    lastName: 'Smith'\n};\nvar spreadResult = __assign({}, spreadObj, spreadObj2);\n// console.log(spreadResult);\nfor (var _i = 0, names_1 = names; _i < names_1.length; _i++) {\n    var item = names_1[_i];\n    console.log(item);\n}\n","// for (let i = 0; i <= 10; i++) {\r\n//     var button = makeButton(\"button \" + i);\r\n\r\n//     button.onclick = function () {\r\n//         alert('button ' + i);\r\n//     }\r\n// }\r\n\r\n// namespace AtomicNumbers {\r\n//     export const H = 1;\r\n//     export const He = 2;\r\n// }\r\n\r\n\r\n// function greetRegular(name) {\r\n//     return \"Hello, \" + name;\r\n// }\r\n\r\n// const greetMin = (name: string) => \"Hello, \" + name;\r\n\r\n\r\n// interface USPostalAddress {\r\n//     streetAddress1: string;\r\n//     streetAddress2?: string;\r\n//     city: string;\r\n//     state: string;\r\n//     zip: string;\r\n//     country: string;\r\n// }\r\n// const addressData1: USPostalAddress = {\r\n//     streetAddress1: \"123 Main\",\r\n//     //streetAddress2: \"3rd floor\",\r\n//     city: \"Anytown\",\r\n//     state: \"NY\",\r\n//     zip: \"10001-1234\",\r\n//     country: \"USA\"\r\n// }\r\n\r\n// const {\r\n//     streetAddress1: street1,\r\n//     streetAddress2: street2 = \"\",\r\n//     city,\r\n//     state\r\n// } = addressData1;\r\n\r\n\r\n// const employee = {\r\n//     workAddress: addressData1,\r\n//     position: {\r\n//         department: {\r\n//             name: \"Development\"\r\n//         }\r\n//     }\r\n// };\r\n\r\n// {\r\n//     const { workAddress: { city }, position: { department: { name: departmentName } } } = employee;\r\n//     console.log(departmentName);        \r\n// }\r\n\r\n\r\n\r\n// function categorizedEmployee({ workAddress: { city } = {city}, position: { department: { name: departmentName } } }) {\r\n//     return {\r\n//         city,\r\n//         departmentName\r\n//     }\r\n// }\r\n\r\n// const category = categorizedEmployee(employee)\r\n\r\n\r\n\r\n// Destructuring arrays\r\nconst names = ['Jim', 'Fred', 'Bob', 'Sam', 'Joe', 'Mike', 'Mark'];\r\nconst [firstDestructure = 'Steve', secondDestructure, ...more] = names;\r\n// console.log(firstDestructure); // => Jim\r\n\r\n\r\n// multiGreet(...names);\r\n\r\n// function multiGreet(...items: string[]){\r\n//     items.forEach(item => {\r\n//         console.log(friend`hello ${item}.`); \r\n//     });\r\n// }\r\n\r\n// function friend(strings: string[], ...substitutions: string[]){\r\n//     if(!substitutions[0]){\r\n//         substitutions[0] = 'Friend';\r\n//     }\r\n//     return processTaggedTemplate(strings, substitutions);\r\n// }\r\n// function processTaggedTemplate(strings: string[], substitutions: string[]){\r\n//     const result = [];\r\n//     substitutions.forEach((sub, index) => {\r\n//         result.push(strings[index], sub);\r\n//     });\r\n//     result.push(strings[strings.length -1]);\r\n//     return result.join('');\r\n// }\r\n\r\nconst names1 = ['Jim', 'Fred', 'Bob', 'Sam', 'Joe', 'Mike', 'Mark'];\r\nconst names2 = ['Eric', 'Scott', 'Steve'];\r\nconst names3 = [...names1, ...names2, 'Brendon'];\r\n// console.log(names3);\r\n\r\n\r\nconst spreadObj = {\r\n    firstName: 'Mark',\r\n    lastName: 'Barry'\r\n}\r\nconst spreadObj2 = {\r\n    lastName: 'Smith'\r\n}\r\n\r\nconst spreadResult = {...spreadObj, ...spreadObj2}\r\n// console.log(spreadResult);\r\n\r\nfor(let item of names){\r\n    console.log(item);\r\n}\r\n"]}